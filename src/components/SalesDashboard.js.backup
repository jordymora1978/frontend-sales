import React, { useState, useEffect } from 'react';
import { User, Package, Truck, Eye, MessageSquare, ExternalLink, Sun, Moon, ShoppingCart, Users, Settings, BarChart3, X, Send, HelpCircle, MapPin, FileText, Clipboard, Edit3, Save, Store, Plus, CheckCircle, AlertCircle, Globe, RefreshCw } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import ConnectMLStore from './ConnectMLStore.jsx';
import MLOrdersSync from '../pages/MLOrdersSync';
import OrdersCollapsible from '../pages/OrdersCollapsible';
import OrdersPageCustom from './OrdersPageCustom';
import './OrdersPageCustom.css';
import apiService from '../services/api';

const SalesDashboard = () => {
  const { user, logout } = useAuth();
  
  // Dashboard states  
  const [theme, setTheme] = useState('light');
  const [activeFilter, setActiveFilter] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('orders');
  const [showMessageModal, setShowMessageModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [modalTab, setModalTab] = useState('messages');
  const [messageInput, setMessageInput] = useState('');
  const [isEditingPublication, setIsEditingPublication] = useState(false);
  
  // ML Stores states
  const [showConnectML, setShowConnectML] = useState(false);
  const [mlStores, setMlStores] = useState([]);

  const handleLogout = () => {
    logout();
  };

  // Load ML stores
  const loadMLStores = async () => {
    try {
      const response = await apiService.request('/api/ml/my-stores');
      setMlStores(response || []);
    } catch (error) {
      console.error('Error loading ML stores:', error);
    }
  };

  // Handle successful ML connection
  const handleMLConnectionSuccess = () => {
    setShowConnectML(false);
    loadMLStores();
  };

  // Delete ML store
  const deleteMLStore = async (storeId, storeName) => {
    if (!window.confirm(`¿Estás seguro de que quieres eliminar la tienda "${storeName}"? Esta acción no se puede deshacer.`)) {
      return;
    }

    try {
      await apiService.request(`/api/ml/stores/${storeId}`, {
        method: 'DELETE'
      });
      
      loadMLStores();
      alert('Tienda eliminada correctamente');
    } catch (error) {
      console.error('Error deleting store:', error);
      alert('Error al eliminar la tienda. Inténtalo de nuevo.');
    }
  };

  // Load stores when component mounts
  useEffect(() => {
    loadMLStores();
  }, []);

  // Datos de ejemplo para el dashboard
  const mockOrders = [
    {
      id: 'MCO-2025001',
      marketplaceBadge: 'colombia',
      productImage: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=80&h=80&fit=crop',
      sku: 'B08NP2DYQR',
      productTitle: 'Auriculares Bluetooth Inalámbricos con Cancelación de Ruido Premium',
      mercadoLibreLink: 'https://articulo.mercadolibre.com.co/MCO-123456789-auriculares-bluetooth-inalambricos-cancelacion-ruido-premium',
      status: 'pending',
      shippingStatus: 'processing',
      customerName: 'María González',
      customerDocument: 'CC 9012051577',
      price: 189500,
      commission: 28425,
      netAmount: 161075,
      amazonDate: '2025-01-15',
      amazonPrice: 89.99,
      amazonLink: 'https://amazon.com/dp/B08NP2DYQR',
      amazonGSS: true,
      minutesAgo: 15,
      quantity: 1,
      dateCreated: '2025-01-15 14:30:00'
    },
    {
      id: 'MLC-2025002',
      marketplaceBadge: 'chile',
      productImage: 'https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=80&h=80&fit=crop',
      sku: 'B07XQXZXVZ',
      productTitle: 'Zapatillas Deportivas Running Nike Air Max Revolution 5',
      mercadoLibreLink: 'https://articulo.mercadolibre.cl/MLC-987654321-zapatillas-deportivas-running-nike-air-max-revolution-5',
      status: 'approved',
      shippingStatus: 'shipped',
      customerName: 'Carlos Mendoza',
      customerDocument: 'RUT 105099282',
      customerPhone: '+56 9 8765 4321',
      customerEmail: 'carlos.mendoza@email.com',
      price: 89990,
      commission: 13498,
      netAmount: 76492,
      amazonDate: '2025-01-14',
      amazonPrice: 129.99,
      amazonLink: 'https://amazon.com/dp/B07XQXZXVZ',
      amazonGSS: false,
      minutesAgo: 45,
      quantity: 1,
      dateCreated: '2025-01-15 13:45:00'
    },
    {
      id: 'MPE-2025003',
      marketplaceBadge: 'peru',
      productImage: 'https://images.unsplash.com/photo-1526170375885-4d8ecf77b99f?w=80&h=80&fit=crop',
      sku: 'B09KMVXT7W',
      productTitle: 'Cámara Fotográfica Digital Canon EOS Rebel T100 Kit Completo',
      mercadoLibreLink: 'https://articulo.mercadolibre.com.pe/MPE-555666777-camara-fotografica-digital-canon-eos-rebel-t100-kit-completo',
      status: 'processing',
      shippingStatus: 'pending',
      customerName: 'Ana Rodríguez',
      customerDocument: 'DNI 42722765',
      customerPhone: '+51 987 654 321',
      customerEmail: 'ana.rodriguez@email.com',
      price: 1850,
      commission: 277.5,
      netAmount: 1572.5,
      amazonDate: '2025-01-13',
      amazonPrice: 599.99,
      amazonLink: 'https://amazon.com/dp/B09KMVXT7W',
      amazonGSS: true,
      minutesAgo: 120,
      quantity: 1,
      dateCreated: '2025-01-15 12:30:00'
    }
  ];

  // Datos de ejemplo para el modal
  const mockMessages = {
    'MCO-2025001': [
      { id: 1, sender: 'customer', text: 'Hola, ¿cuando llegará mi pedido?', time: '10:30 AM', date: '2025-01-15' },
      { id: 2, sender: 'seller', text: 'Buenos días! Su pedido fue despachado hoy y llegará en 3-5 días hábiles.', time: '10:45 AM', date: '2025-01-15' }
    ]
  };

  const mockQuestions = {
    'MCO-2025001': [
      { id: 1, question: '¿El producto incluye garantía?', answer: 'Sí, incluye garantía de 12 meses.', time: '2 días atrás', answered: true }
    ]
  };

  const mockLogistics = {
    'MCO-2025001': {
      provider: 'ANICAM',
      tracking: 'ANI-CO-789456123',
      status: 'En tránsito',
      steps: [
        { status: 'Orden recibida', date: '2025-01-15 08:00', completed: true, location: 'Bogotá, Colombia' },
        { status: 'En centro de distribución', date: '2025-01-15 12:00', completed: true, location: 'Bogotá, Colombia' }
      ]
    }
  };

  const mockPublications = {
    'MCO-2025001': {
      nombre: 'Auriculares Bluetooth Inalámbricos con Cancelación de Ruido Premium',
      precio: 189500,
      moneda: 'COP',
      tipoPublicacion: 'Premium',
      diasEntrega: '3-5 días hábiles',
      categoria: 'Electrónicos > Audio > Auriculares',
      estado: 'Activa',
      stock: 25,
      descripcion: 'Auriculares inalámbricos de alta calidad con tecnología de cancelación de ruido activa.',
      plantilla: 'ELECTRONICA_PREMIUM'
    }
  };

  const stats = {
    pending: 24,
    processing: 18,
    shipped: 42,
    revenue: 2847650
  };

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const formatCurrency = (amount, country = 'colombia') => {
    const formatters = {
      colombia: new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }),
      chile: new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP' }),
      peru: new Intl.NumberFormat('es-PE', { style: 'currency', currency: 'PEN' }),
    };
    return formatters[country]?.format(amount) || `$${amount.toLocaleString()}`;
  };

  const getStatusBadge = (status) => {
    const badges = {
      pending: { class: 'status-pending', text: 'Pendiente' },
      approved: { class: 'status-approved', text: 'Aprobado' },
      processing: { class: 'status-processing', text: 'Procesando' },
      shipped: { class: 'status-shipped', text: 'Enviado' }
    };
    return badges[status] || badges.pending;
  };

  const getMarketBadge = (market) => {
    const badges = {
      colombia: { class: 'market-colombia', text: 'Colombia' },
      chile: { class: 'market-chile', text: 'Chile' },
      peru: { class: 'market-peru', text: 'Perú' }
    };
    return badges[market] || badges.colombia;
  };

  const filteredOrders = mockOrders.filter(order => {
    const matchesFilter = activeFilter === 'all' || order.status === activeFilter;
    const matchesSearch = order.productTitle.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         order.sku.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         order.customerName.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  return (
    <div className={`app-layout ${theme}-mode`}>
      {/* SIDEBAR */}
      <div className="sidebar">
        <div className="sidebar-header">
          <div className="sidebar-logo">Dropux Sales</div>
          <button className="theme-toggle" onClick={toggleTheme}>
            {theme === 'light' ? <Moon size={14} /> : <Sun size={14} />}
            {theme === 'light' ? ' Modo Oscuro' : ' Modo Claro'}
          </button>
        </div>
        
        <nav className="sidebar-nav">
          <button 
            className={`nav-item ${activeTab === 'orders' ? 'active' : ''}`}
            onClick={() => setActiveTab('orders')}
          >
            <ShoppingCart size={18} />
            Órdenes de Venta
          </button>
          <button 
            className={`nav-item ${activeTab === 'dashboard' ? 'active' : ''}`}
            onClick={() => setActiveTab('dashboard')}
          >
            <BarChart3 size={18} />
            Dashboard
          </button>
          <button 
            className={`nav-item ${activeTab === 'customers' ? 'active' : ''}`}
            onClick={() => setActiveTab('customers')}
          >
            <Users size={18} />
            Clientes
          </button>
          <button 
            className={`nav-item ${activeTab === 'products' ? 'active' : ''}`}
            onClick={() => setActiveTab('products')}
          >
            <Package size={18} />
            Productos
          </button>
          <button 
            className={`nav-item ${activeTab === 'logistics' ? 'active' : ''}`}
            onClick={() => setActiveTab('logistics')}
          >
            <Truck size={18} />
            Logística
          </button>
          <button 
            className={`nav-item ${activeTab === 'ml-stores' ? 'active' : ''}`}
            onClick={() => setActiveTab('ml-stores')}
          >
            <Store size={18} />
            Tiendas ML
            {mlStores.length > 0 && (
              <span className="nav-badge">{mlStores.length}</span>
            )}
          </button>
          <button 
            className={`nav-item ${activeTab === 'ml-sync' ? 'active' : ''}`}
            onClick={() => setActiveTab('ml-sync')}
          >
            <RefreshCw size={18} />
            Sincronizar Órdenes
          </button>
          <button 
            className={`nav-item ${activeTab === 'settings' ? 'active' : ''}`}
            onClick={() => setActiveTab('settings')}
          >
            <Settings size={18} />
            Configuración
          </button>
        </nav>
      </div>

      {/* MAIN CONTENT */}
      <div className="main-content">
        {/* TOP HEADER */}
        <div className="top-header">
          <div className="header-left">
            <h1 className="page-title">
              {activeTab === 'orders' && 'Órdenes de Venta'}
              {activeTab === 'dashboard' && 'Dashboard'}
              {activeTab === 'customers' && 'Clientes'}
              {activeTab === 'products' && 'Productos'}
              {activeTab === 'logistics' && 'Logística'}
              {activeTab === 'ml-stores' && 'Tiendas MercadoLibre'}
              {activeTab === 'ml-sync' && 'Sincronizar Órdenes'}
              {activeTab === 'settings' && 'Configuración'}
            </h1>
            {activeTab === 'orders' && (
              <div className="search-box">
                <input
                  type="text"
                  placeholder="Buscar por producto, SKU o cliente..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            )}
          </div>
          
          <div className="header-right">
            {activeTab === 'orders' && (
              <>
                <button 
                  className={`filter-btn ${activeFilter === 'all' ? 'active' : ''}`}
                  onClick={() => setActiveFilter('all')}
                >
                  Todas
                </button>
                <button 
                  className={`filter-btn ${activeFilter === 'pending' ? 'active' : ''}`}
                  onClick={() => setActiveFilter('pending')}
                >
                  Pendientes
                </button>
                <button 
                  className={`filter-btn ${activeFilter === 'processing' ? 'active' : ''}`}
                  onClick={() => setActiveFilter('processing')}
                >
                  Procesando
                </button>
                <button 
                  className={`filter-btn ${activeFilter === 'shipped' ? 'active' : ''}`}
                  onClick={() => setActiveFilter('shipped')}
                >
                  Enviadas
                </button>
              </>
            )}
            <div className="user-info">
              <User size={16} />
              {user?.email || 'Usuario'}
              <button 
                onClick={handleLogout}
                style={{ 
                  marginLeft: '10px', 
                  padding: '4px 8px', 
                  fontSize: '12px',
                  background: '#dc3545',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                Salir
              </button>
            </div>
          </div>
        </div>

        {/* CONTENT AREA */}
        <div className="content-area">
          {activeTab === 'orders' && <OrdersPageCustom />}

          {activeTab === 'ml-stores' && (
            <div className="ml-stores-section">
              <div className="section-header">
                <h2>Tiendas MercadoLibre Conectadas</h2>
                <button 
                  className="primary-btn"
                  onClick={() => setShowConnectML(true)}
                >
                  <Plus size={16} />
                  Conectar Nueva Tienda
                </button>
              </div>
              
              <div className="stores-grid">
                {mlStores.map((store) => (
                  <div key={store.id} className="store-card">
                    <div className="store-header">
                      <div className="store-info">
                        <h3>{store.nickname}</h3>
                        <p>ID: {store.ml_user_id}</p>
                        <p>País: {store.site_id}</p>
                      </div>
                      <span className={`store-status ${store.active ? 'active' : 'inactive'}`}>
                        {store.active ? 'Activa' : 'Inactiva'}
                      </span>
                    </div>
                    <div className="store-actions">
                      <button className="secondary-btn">
                        <RefreshCw size={14} />
                        Sincronizar
                      </button>
                      <button 
                        className="danger-btn"
                        onClick={() => deleteMLStore(store.id, store.nickname)}
                      >
                        Eliminar
                      </button>
                    </div>
                  </div>
                ))}
                
                {mlStores.length === 0 && (
                  <div className="empty-state">
                    <Store size={48} />
                    <h3>No hay tiendas conectadas</h3>
                    <p>Conecta tu primera tienda de MercadoLibre para comenzar a gestionar tus ventas</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {activeTab === 'ml-sync' && <MLOrdersSync />}
          {activeTab === 'dashboard' && (
            <div className="dashboard-content">
              <h2>Dashboard - Próximamente</h2>
              <p>Aquí se mostrarán métricas y análisis detallados de ventas.</p>
            </div>
          )}
        </div>
      </div>

      {/* Modal de detalles de orden */}
      {showMessageModal && selectedOrder && (
        <div className="modal-overlay" onClick={() => setShowMessageModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Orden {selectedOrder.id}</h3>
              <button
                className="modal-close"
                onClick={() => setShowMessageModal(false)}
              >
                <X size={20} />
              </button>
            </div>

            <div className="modal-tabs">
              <button
                className={`modal-tab ${modalTab === 'messages' ? 'active' : ''}`}
                onClick={() => setModalTab('messages')}
              >
                <MessageSquare size={16} />
                Mensajes
              </button>
              <button
                className={`modal-tab ${modalTab === 'questions' ? 'active' : ''}`}
                onClick={() => setModalTab('questions')}
              >
                <HelpCircle size={16} />
                Preguntas
              </button>
              <button
                className={`modal-tab ${modalTab === 'logistics' ? 'active' : ''}`}
                onClick={() => setModalTab('logistics')}
              >
                <Truck size={16} />
                Logística
              </button>
              <button
                className={`modal-tab ${modalTab === 'publication' ? 'active' : ''}`}
                onClick={() => setModalTab('publication')}
              >
                <FileText size={16} />
                Publicación
              </button>
              <button
                className={`modal-tab ${modalTab === 'techspecs' ? 'active' : ''}`}
                onClick={() => setModalTab('techspecs')}
              >
                <Settings size={16} />
                Especificaciones
              </button>
            </div>

            <div className="modal-body">
              {modalTab === 'messages' && (
                <div className="messages-section">
                  <div className="messages-list">
                    {(mockMessages[selectedOrder.id] || []).map((message) => (
                      <div
                        key={message.id}
                        className={`message ${message.sender === 'seller' ? 'seller' : 'customer'}`}
                      >
                        <div className="message-content">{message.text}</div>
                        <div className="message-time">{message.time} - {message.date}</div>
                      </div>
                    ))}
                  </div>
                  <div className="message-input">
                    <input
                      type="text"
                      value={messageInput}
                      onChange={(e) => setMessageInput(e.target.value)}
                      placeholder="Escribir mensaje..."
                    />
                    <button className="send-btn">
                      <Send size={16} />
                    </button>
                  </div>
                </div>
              )}

              {modalTab === 'questions' && (
                <div className="questions-section">
                  {(mockQuestions[selectedOrder.id] || []).map((question) => (
                    <div key={question.id} className="question-card">
                      <div className="question-text">{question.question}</div>
                      <div className="question-answer">{question.answer}</div>
                      <div className="question-meta">
                        <span className={`question-status ${question.answered ? 'answered' : 'pending'}`}>
                          {question.answered ? 'Respondida' : 'Pendiente'}
                        </span>
                        <span className="question-time">{question.time}</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {modalTab === 'logistics' && (
                <div className="logistics-section">
                  {mockLogistics[selectedOrder.id] && (
                    <div className="logistics-info">
                      <div className="logistics-header">
                        <h4>Información de Envío</h4>
                        <div className="logistics-meta">
                          <p><strong>Proveedor:</strong> {mockLogistics[selectedOrder.id].provider}</p>
                          <p><strong>Guía:</strong> {mockLogistics[selectedOrder.id].tracking}</p>
                          <p><strong>Estado:</strong> {mockLogistics[selectedOrder.id].status}</p>
                        </div>
                      </div>
                      <div className="logistics-timeline">
                        {mockLogistics[selectedOrder.id].steps.map((step, index) => (
                          <div key={index} className={`timeline-step ${step.completed ? 'completed' : 'pending'}`}>
                            <div className="timeline-marker">
                              {step.completed ? <CheckCircle size={16} /> : <AlertCircle size={16} />}
                            </div>
                            <div className="timeline-content">
                              <div className="timeline-title">{step.status}</div>
                              <div className="timeline-date">{step.date}</div>
                              {step.location && (
                                <div className="timeline-location">
                                  <MapPin size={12} />
                                  {step.location}
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {modalTab === 'publication' && (
                <div className="publication-section">
                  {mockPublications[selectedOrder.id] && (
                    <div className="publication-form">
                      <div className="form-row">
                        <div className="form-group">
                          <label>Nombre del Producto</label>
                          <input
                            type="text"
                            value={mockPublications[selectedOrder.id].nombre}
                            readOnly={!isEditingPublication}
                          />
                        </div>
                        <div className="form-group">
                          <label>Precio</label>
                          <input
                            type="number"
                            value={mockPublications[selectedOrder.id].precio}
                            readOnly={!isEditingPublication}
                          />
                        </div>
                      </div>
                      <div className="form-row">
                        <div className="form-group">
                          <label>Tipo de Publicación</label>
                          <input
                            type="text"
                            value={mockPublications[selectedOrder.id].tipoPublicacion}
                            readOnly
                          />
                        </div>
                        <div className="form-group">
                          <label>Stock</label>
                          <input
                            type="number"
                            value={mockPublications[selectedOrder.id].stock}
                            readOnly={!isEditingPublication}
                          />
                        </div>
                      </div>
                      <div className="form-group">
                        <label>Descripción</label>
                        <textarea
                          value={mockPublications[selectedOrder.id].descripcion}
                          readOnly={!isEditingPublication}
                          rows={4}
                        />
                      </div>
                      <div className="form-actions">
                        <button
                          className="secondary-btn"
                          onClick={() => setIsEditingPublication(!isEditingPublication)}
                        >
                          {isEditingPublication ? <Save size={16} /> : <Edit3 size={16} />}
                          {isEditingPublication ? 'Guardar' : 'Editar'}
                        </button>
                        <a
                          href={selectedOrder.mercadoLibreLink}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="primary-btn"
                        >
                          <ExternalLink size={16} />
                          Ver en MercadoLibre
                        </a>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {modalTab === 'techspecs' && (
                <div className="techspecs-section">
                  <div className="specs-grid">
                    <div className="spec-item">
                      <span className="spec-label">SKU:</span>
                      <span className="spec-value">{selectedOrder.sku}</span>
                    </div>
                    <div className="spec-item">
                      <span className="spec-label">Cantidad:</span>
                      <span className="spec-value">{selectedOrder.quantity}</span>
                    </div>
                    <div className="spec-item">
                      <span className="spec-label">Precio Amazon:</span>
                      <span className="spec-value">${selectedOrder.amazonPrice}</span>
                    </div>
                    <div className="spec-item">
                      <span className="spec-label">Fecha Amazon:</span>
                      <span className="spec-value">{selectedOrder.amazonDate}</span>
                    </div>
                    <div className="spec-item">
                      <span className="spec-label">Amazon GSS:</span>
                      <span className={`spec-value ${selectedOrder.amazonGSS ? 'success' : 'danger'}`}>
                        {selectedOrder.amazonGSS ? 'Sí' : 'No'}
                      </span>
                    </div>
                    <div className="spec-item">
                      <span className="spec-label">Creada:</span>
                      <span className="spec-value">{selectedOrder.dateCreated}</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Modal de conectar ML Store */}
      {showConnectML && (
        <ConnectMLStore
          onClose={() => setShowConnectML(false)}
          onSuccess={handleMLConnectionSuccess}
        />
      )}
    </div>
  );
};

export default SalesDashboard;