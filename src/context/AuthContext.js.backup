/**
 * Authentication Context for Sales Frontend
 * Provides global authentication state and methods
 */

import React, { createContext, useContext, useEffect, useState, useMemo } from 'react';
import { BrowserRouter as Router, useNavigate } from 'react-router-dom';
// Use real auth service for production
// import authService from '../services/mockAuthService';
import authService from '../services/authService';
// import ssoManager from '../utils/ssoManager';

const AuthContext = createContext(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

const AuthProviderInner = ({ children }) => {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true); // 🔄 LOADING INICIAL para evitar parpadeo
  const [error, setError] = useState(null);

  // 🔄 Carga inicial: Evita parpadeo al validar autenticación
  useEffect(() => {
    const initializeUser = async () => {
      const cachedUser = localStorage.getItem('user_data');
      const token = localStorage.getItem('auth_token');
      
      if (cachedUser && token) {
        try {
          const parsedUser = JSON.parse(cachedUser);
          setUser(parsedUser); // Usuario disponible desde cache inmediatamente
          
          // ❌ REMOVED: Race condition eliminated - using JSON-based menu system
        } catch (e) {
          console.error('Failed to parse cached user');
          localStorage.removeItem('user_data');
        }
      }
      
      // Finalizar loading después de verificar cache
      setLoading(false);
    };

    initializeUser();
  }, []);

  const login = async (email, password) => {
    try {
      setError(null);
      
      // ✅ PASO 1: Login normal 
      const response = await authService.login(email, password);
      let userData = response.user || response;
      
      // ✅ TEMPORARILY DISABLED: Complete user data fetch causing delays
      // TODO: Fix conflict between api.js and authService.js before re-enabling
      // try {
      //   const completeUserData = await authService.getCurrentUser();
      //   if (completeUserData) {
      //     userData = completeUserData;
      //   }
      // } catch (e) {
      //   console.warn('Could not fetch complete user data, using login data');
      // }
      
      setUser(userData);
      return userData;
    } catch (error) {
      console.error('Login error:', error);
      setError(error.message || 'Login failed');
      throw error;
    }
  };

  const logout = () => {
    // ⚡ EMPRESARIAL: Logout instantáneo sin recarga de página
    setUser(null);
    setError(null);
    localStorage.clear();
    sessionStorage.clear();
    
    // ⚡ NAVEGACIÓN SPA INSTANTÁNEA (0 segundos)
    navigate('/auth/login', { replace: true });
    
    // API cleanup en background (no bloquea)
    authService.logout().catch(() => {
      console.log('Background logout API cleanup failed');
    });
  };

  // ⚡ EMPRESARIAL: Logout automático a las 23:59 hora local
  useEffect(() => {
    if (!user) return; // Solo si hay usuario logueado
    
    const checkEndOfWorkDay = () => {
      const now = new Date(); // Hora local del usuario
      const hour = now.getHours();
      const minute = now.getMinutes();
      
      // Logout automático a las 23:59
      if (hour === 23 && minute === 59) {
        logout();
        alert('Fin del día laboral. Sesión cerrada automáticamente a las 23:59.');
      }
    };
    
    // Verificar cada minuto
    const interval = setInterval(checkEndOfWorkDay, 60000);
    return () => clearInterval(interval);
  }, [user]); // ⚡ Removí logout de las dependencias para evitar el error

  // Add protection against infinite loops
  useEffect(() => {
    const checkForInfiniteLoop = () => {
      const refreshErrors = parseInt(localStorage.getItem('refresh_error_count') || '0');
      if (refreshErrors > 3) {
        console.warn('Detected potential infinite refresh loop, forcing logout');
        localStorage.removeItem('refresh_error_count');
        authService.forceLogout();
      }
    };

    // Check every 5 seconds for potential loops
    const intervalId = setInterval(checkForInfiniteLoop, 5000);
    
    return () => clearInterval(intervalId);
  }, []);

  const refreshUser = async () => {
    try {
      const currentUser = await authService.getCurrentUser();
      setUser(currentUser);
      return currentUser;
    } catch (error) {
      console.error('Refresh user error:', error);
      return null;
    }
  };

  // ❌ REMOVED: forceLoadPermissions eliminated - using JSON-based system

  // 🚀 TEMPORARILY DISABLED: AUTO-FIX causing login delays
  // TODO: Fix conflict between api.js and authService.js before re-enabling
  // useEffect(() => {
  //   const autoLoadPermissions = async () => {
  //     if (user && user.roles && user.roles.length > 0 && !user.role_permissions) {
  //       console.log('🔧 [AUTO-FIX] User without role_permissions detected, force loading...');
  //       const success = await forceLoadPermissions();
  //       if (success) {
  //         console.log('✅ [AUTO-FIX] Permissions loaded automatically');
  //       }
  //     }
  //   };

  //   // Delay para evitar loops infinitos
  //   const timer = setTimeout(autoLoadPermissions, 1000);
  //   return () => clearTimeout(timer);
  // }, [user]); // Solo cuando cambie el usuario

  // 🚀 SIMPLE Y EFECTIVO: Escuchar cambios de permisos
  useEffect(() => {
    // Escuchar eventos de actualización de permisos
    const handlePermissionUpdate = (event) => {
      console.log(`⚡ [PERMISSION UPDATE] Detected:`, event.detail);
      // Forzar re-render del contexto para que el sidebar se actualice
      setUser(prevUser => ({ ...prevUser }));
    };

    // Escuchar cambios en localStorage de otras ventanas
    const handleStorageChange = (event) => {
      if (event.key === 'permission_update_trigger') {
        const updateData = JSON.parse(event.newValue || '{}');
        console.log(`⚡ [CROSS-WINDOW UPDATE] Detected:`, updateData);
        
        // Actualizar usuario si es del rol afectado
        const userData = localStorage.getItem('user_data');
        if (userData && user) {
          const currentUser = JSON.parse(userData);
          if (currentUser.roles && currentUser.roles.includes(updateData.role)) {
            // 🔧 FIXED: Actualizar role_permissions reales en lugar de restricted_pages
            currentUser.role_permissions = updateData.allowedPages;
            localStorage.setItem('user_data', JSON.stringify(currentUser));
            setUser(currentUser);
            console.log(`✅ [CROSS-WINDOW UPDATE] Updated role_permissions:`, updateData.allowedPages);
          }
        }
      }
    };

    window.addEventListener('userPermissionsUpdated', handlePermissionUpdate);
    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('userPermissionsUpdated', handlePermissionUpdate);
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [user]);

  // Permission checking helpers
  const hasPermission = (permissionType = 'read') => {
    return authService.hasPermission(permissionType);
  };

  const isAdmin = () => {
    return authService.isAdmin();
  };

  // Calculate authentication status based on context state
  const isAuthenticated = useMemo(() => {
    // Only authenticated if we have a valid user object
    return !loading && !!user && !!user.id && !!user.email;
  }, [loading, user]);

  const value = {
    user,
    loading,
    error,
    login,
    logout,
    refreshUser,
    hasPermission,
    isAdmin,
    isAuthenticated,
    setError
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// ⚡ EMPRESARIAL: Wrapper para Router
export const AuthProvider = ({ children }) => (
  <Router>
    <AuthProviderInner>{children}</AuthProviderInner>
  </Router>
);

export default AuthContext;